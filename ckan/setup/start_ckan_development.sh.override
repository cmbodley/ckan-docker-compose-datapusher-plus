#!/bin/bash

if [[ $CKAN__PLUGINS == *"datapusher"* ]]; then
    # Add ckan.datapusher.api_token to the CKAN config file (updated with corrected value later)
    echo "Setting a temporary value for ckan.datapusher.api_token"
    ckan config-tool $CKAN_INI ckan.datapusher.api_token=xxx
fi

echo "data pusher plus stuff"
#data pusher plus config
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.use_proxy = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.ssl_verify = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.upload_log_level = INFO"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.formats = csv tsv tab ssv xls xlsx xlsxb xlsm ods geojson shp qgis zip"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.pii_screening = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.pii_found_abort = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.pii_show_candidates = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.pii_quick_screen = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.qsv_bin = /usr/local/bin/qsvdp"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.preview_rows = 100"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.download_timeout = 300"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.max_content_length = 1256000000000"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.chunk_size = 16384"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.default_excel_sheet = 0"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.sort_and_dupe_check = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.dedup = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.unsafe_prefix = unsafe_"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.reserved_colnames = _id"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.prefer_dmy = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.ignore_file_hash = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_index_threshold = 3"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_index_dates = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_unique_index = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.add_summary_stats_resource = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.summary_stats_with_preview = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.qsv_stats_string_max_length = 32767"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.qsv_dates_whitelist = date,time,due,open,close,created"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.qsv_freq_limit = 10"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_alias = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_alias_unique = false"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.copy_readbuffer_size = 1048576"
#ckan config-tool $CKAN_INI "ckanext.datapusher_plus.type_mapping = '{"String": "text", "Integer": "numeric","Float": "numeric","DateTime": "timestamp","Date": "date","NULL": "text"}'
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_spatial_simplication = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.spatial_simplication_relative_tolerance = 0.1"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.latitude_fields = latitude,lat"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.longitude_fields = longitude,long,lon"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.jinja2_bytecode_cache_dir = /tmp/jinja2_butecode_cache"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.auto_unzip_one_file = true"
ckan config-tool $CKAN_INI "ckanext.datapusher_plus.api_token=$(ckan -c $CKAN_INI user token add ckan_admin dpplus | tail -n 1 | tr -d '\t')"

# Set debug to true
echo "Enabling debug mode"
ckan config-tool $CKAN_INI -s DEFAULT "debug = true"

# Set up the Secret key used by Beaker and Flask
# This can be overriden using a CKAN___BEAKER__SESSION__SECRET env var
if grep -qE "SECRET_KEY ?= ?$" ckan.ini
then
    echo "Setting SECRET_KEY in ini file"
    ckan config-tool $CKAN_INI "SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')"
    ckan config-tool $CKAN_INI "WTF_CSRF_SECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_urlsafe())')"
    JWT_SECRET=$(python3 -c 'import secrets; print("string:" + secrets.token_urlsafe())')
    ckan config-tool $CKAN_INI "api_token.jwt.encode.secret=${JWT_SECRET}"
    ckan config-tool $CKAN_INI "api_token.jwt.decode.secret=${JWT_SECRET}"
fi

# Update the plugins setting in the ini file with the values defined in the env var
echo "Loading the following plugins: $CKAN__PLUGINS"
ckan config-tool $CKAN_INI "ckan.plugins = $CKAN__PLUGINS"

# Update test-core.ini DB, SOLR & Redis settings
echo "Loading test settings into test-core.ini"
ckan config-tool $SRC_DIR/ckan/test-core.ini \
    "sqlalchemy.url = $TEST_CKAN_SQLALCHEMY_URL" \
    "ckan.datastore.write_url = $TEST_CKAN_DATASTORE_WRITE_URL" \
    "ckan.datastore.read_url = $TEST_CKAN_DATASTORE_READ_URL" \
    "solr_url = $TEST_CKAN_SOLR_URL" \
    "ckan.redis.url = $TEST_CKAN_REDIS_URL"

# Run the prerun script to init CKAN and create the default admin user
python3 prerun.py

# Run any startup scripts provided by images extending this one
if [[ -d "/docker-entrypoint.d" ]]
then
    for f in /docker-entrypoint.d/*; do
        case "$f" in
            *.sh)     echo "$0: Running init file $f"; . "$f" ;;
            *.py)     echo "$0: Running init file $f"; python3 "$f"; echo ;;
            *)        echo "$0: Ignoring $f (not an sh or py file)" ;;
        esac
        echo
    done
fi

CKAN_RUN="/usr/local/bin/ckan -c $CKAN_INI run -H 0.0.0.0"
CKAN_OPTIONS=""
if [ "$USE_DEBUGPY_FOR_DEV" = true ] ; then
    CKAN_RUN="/usr/local/bin/python -m debugpy --listen 0.0.0.0:5678 $CKAN_RUN"
    CKAN_OPTIONS="$CKAN_OPTIONS --disable-reloader"
fi

if [ "$USE_HTTPS_FOR_DEV" = true ] ; then
    CKAN_OPTIONS="$CKAN_OPTIONS -C unsafe.cert -K unsafe.key"
fi

# Start the development server as the ckan user with automatic reload
while true; do
    $CKAN_RUN $CKAN_OPTIONS
    echo Exit with status $?. Restarting.
    sleep 2
done
